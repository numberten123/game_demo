%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(all_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("all_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_1101_toc() :: #m_1101_toc{}.

-type m_1001_tos() :: #m_1001_tos{}.

-type m_1001_toc() :: #m_1001_toc{}.

-type m_1002_tos() :: #m_1002_tos{}.

-type m_1002_toc() :: #m_1002_toc{}.

-type m_1003_tos() :: #m_1003_tos{}.

-type m_1003_toc() :: #m_1003_toc{}.

-type m_1004_toc() :: #m_1004_toc{}.

-type m_1090_tos() :: #m_1090_tos{}.

-type m_1090_toc() :: #m_1090_toc{}.

-type p_test() :: #p_test{}.

-export_type(['m_1101_toc'/0, 'm_1001_tos'/0, 'm_1001_toc'/0, 'm_1002_tos'/0, 'm_1002_toc'/0, 'm_1003_tos'/0, 'm_1003_toc'/0, 'm_1004_toc'/0, 'm_1090_tos'/0, 'm_1090_toc'/0, 'p_test'/0]).

-spec encode_msg(#m_1101_toc{} | #m_1001_tos{} | #m_1001_toc{} | #m_1002_tos{} | #m_1002_toc{} | #m_1003_tos{} | #m_1003_toc{} | #m_1004_toc{} | #m_1090_tos{} | #m_1090_toc{} | #p_test{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_1101_toc{} | #m_1001_tos{} | #m_1001_toc{} | #m_1002_tos{} | #m_1002_toc{} | #m_1003_tos{} | #m_1003_toc{} | #m_1004_toc{} | #m_1090_tos{} | #m_1090_toc{} | #p_test{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_1101_toc{} | #m_1001_tos{} | #m_1001_toc{} | #m_1002_tos{} | #m_1002_toc{} | #m_1003_tos{} | #m_1003_toc{} | #m_1004_toc{} | #m_1090_tos{} | #m_1090_toc{} | #p_test{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_1101_toc ->
	  encode_msg_m_1101_toc(id(Msg, TrUserData), TrUserData);
      m_1001_tos ->
	  encode_msg_m_1001_tos(id(Msg, TrUserData), TrUserData);
      m_1001_toc ->
	  encode_msg_m_1001_toc(id(Msg, TrUserData), TrUserData);
      m_1002_tos ->
	  encode_msg_m_1002_tos(id(Msg, TrUserData), TrUserData);
      m_1002_toc ->
	  encode_msg_m_1002_toc(id(Msg, TrUserData), TrUserData);
      m_1003_tos ->
	  encode_msg_m_1003_tos(id(Msg, TrUserData), TrUserData);
      m_1003_toc ->
	  encode_msg_m_1003_toc(id(Msg, TrUserData), TrUserData);
      m_1004_toc ->
	  encode_msg_m_1004_toc(id(Msg, TrUserData), TrUserData);
      m_1090_tos ->
	  encode_msg_m_1090_tos(id(Msg, TrUserData), TrUserData);
      m_1090_toc ->
	  encode_msg_m_1090_toc(id(Msg, TrUserData), TrUserData);
      p_test ->
	  encode_msg_p_test(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_1101_toc(Msg, TrUserData) ->
    encode_msg_m_1101_toc(Msg, <<>>, TrUserData).


encode_msg_m_1101_toc(#m_1101_toc{cmd = F1,
				  error_code = F2, description = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	   end
    end.

encode_msg_m_1001_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_1001_toc(Msg, TrUserData) ->
    encode_msg_m_1001_toc(Msg, <<>>, TrUserData).


encode_msg_m_1001_toc(#m_1001_toc{time = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_1002_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_1002_toc(Msg, TrUserData) ->
    encode_msg_m_1002_toc(Msg, <<>>, TrUserData).


encode_msg_m_1002_toc(#m_1002_toc{public_key = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_1003_tos(Msg, TrUserData) ->
    encode_msg_m_1003_tos(Msg, <<>>, TrUserData).


encode_msg_m_1003_tos(#m_1003_tos{username = F1,
				  password = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_m_1003_toc(Msg, TrUserData) ->
    encode_msg_m_1003_toc(Msg, <<>>, TrUserData).


encode_msg_m_1003_toc(#m_1003_toc{ip = F1, port = F2,
				  role_id = F3, auth_key = F4},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_m_1004_toc(Msg, TrUserData) ->
    encode_msg_m_1004_toc(Msg, <<>>, TrUserData).


encode_msg_m_1004_toc(#m_1004_toc{ip = F1, role_id = F2,
				  test_info = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_m_1004_toc_test_info(TrF3, B2, TrUserData)
      end
    end.

encode_msg_m_1090_tos(Msg, TrUserData) ->
    encode_msg_m_1090_tos(Msg, <<>>, TrUserData).


encode_msg_m_1090_tos(#m_1090_tos{role_id = F1,
				  auth_key = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_m_1090_toc(_Msg, _TrUserData) -> <<>>.

encode_msg_p_test(Msg, TrUserData) ->
    encode_msg_p_test(Msg, <<>>, TrUserData).


encode_msg_p_test(#p_test{ip = F1, role_id = F2,
			  role_id3 = F3, role_id4 = F4, role_id5 = F5},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
	   end
    end.

e_mfield_m_1004_toc_test_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_test(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_1004_toc_test_info([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_m_1004_toc_test_info(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_m_1004_toc_test_info(Rest, Bin3, TrUserData);
e_field_m_1004_toc_test_info([], Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_1101_toc, Bin, TrUserData) ->
    id(decode_msg_m_1101_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1001_tos, Bin, TrUserData) ->
    id(decode_msg_m_1001_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1001_toc, Bin, TrUserData) ->
    id(decode_msg_m_1001_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1002_tos, Bin, TrUserData) ->
    id(decode_msg_m_1002_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1002_toc, Bin, TrUserData) ->
    id(decode_msg_m_1002_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1003_tos, Bin, TrUserData) ->
    id(decode_msg_m_1003_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1003_toc, Bin, TrUserData) ->
    id(decode_msg_m_1003_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1004_toc, Bin, TrUserData) ->
    id(decode_msg_m_1004_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1090_tos, Bin, TrUserData) ->
    id(decode_msg_m_1090_tos(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_1090_toc, Bin, TrUserData) ->
    id(decode_msg_m_1090_toc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_test, Bin, TrUserData) ->
    id(decode_msg_p_test(Bin, TrUserData), TrUserData).



decode_msg_m_1101_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1101_toc(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1101_toc(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1101_toc_cmd(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_m_1101_toc(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1101_toc_error_code(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_m_1101_toc(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1101_toc_description(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_1101_toc(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #m_1101_toc{cmd = F@_1, error_code = F@_2,
		description = F@_3};
dfp_read_field_def_m_1101_toc(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_m_1101_toc(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_m_1101_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1101_toc(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_m_1101_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_1101_toc_cmd(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_m_1101_toc_error_code(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_m_1101_toc_description(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1101_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_m_1101_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_m_1101_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_m_1101_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_m_1101_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_m_1101_toc(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #m_1101_toc{cmd = F@_1, error_code = F@_2,
		description = F@_3}.

d_field_m_1101_toc_cmd(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1101_toc_cmd(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_m_1101_toc_cmd(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1101_toc(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_m_1101_toc_error_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1101_toc_error_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_1101_toc_error_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1101_toc(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_m_1101_toc_description(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1101_toc_description(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_1101_toc_description(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1101_toc(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, TrUserData).

skip_varint_m_1101_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_1101_toc(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_m_1101_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1101_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_m_1101_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1101_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_m_1101_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1101_toc(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_m_1101_toc(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1101_toc(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_m_1101_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1101_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_m_1101_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1101_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_m_1001_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_1001_tos(Bin, 0, 0, TrUserData).

dfp_read_field_def_m_1001_tos(<<>>, 0, 0, _) ->
    #m_1001_tos{};
dfp_read_field_def_m_1001_tos(Other, Z1, Z2,
			      TrUserData) ->
    dg_read_field_def_m_1001_tos(Other, Z1, Z2, TrUserData).

dg_read_field_def_m_1001_tos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1001_tos(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
dg_read_field_def_m_1001_tos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_m_1001_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_1001_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_1001_tos(Rest, 0, 0,
					   TrUserData);
      3 ->
	  skip_group_m_1001_tos(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_m_1001_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_1001_tos(<<>>, 0, 0, _) ->
    #m_1001_tos{}.

skip_varint_m_1001_tos(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    skip_varint_m_1001_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_1001_tos(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    dfp_read_field_def_m_1001_tos(Rest, Z1, Z2, TrUserData).

skip_length_delimited_m_1001_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1001_tos(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
skip_length_delimited_m_1001_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1001_tos(Rest2, 0, 0, TrUserData).

skip_group_m_1001_tos(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1001_tos(Rest, 0, Z2, TrUserData).

skip_32_m_1001_tos(<<_:32, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1001_tos(Rest, Z1, Z2, TrUserData).

skip_64_m_1001_tos(<<_:64, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1001_tos(Rest, Z1, Z2, TrUserData).

decode_msg_m_1001_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1001_toc(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1001_toc(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_m_1001_toc_time(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_1001_toc(<<>>, 0, 0, F@_1, _) ->
    #m_1001_toc{time = F@_1};
dfp_read_field_def_m_1001_toc(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_m_1001_toc(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_m_1001_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1001_toc(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_m_1001_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_1001_toc_time(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1001_toc(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_1001_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_1001_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_m_1001_toc(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_m_1001_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_1001_toc(<<>>, 0, 0, F@_1, _) ->
    #m_1001_toc{time = F@_1}.

d_field_m_1001_toc_time(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_1001_toc_time(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_m_1001_toc_time(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1001_toc(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_m_1001_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_m_1001_toc(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_1001_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_1001_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_m_1001_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1001_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_1001_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1001_toc(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_m_1001_toc(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1001_toc(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_m_1001_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_m_1001_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_m_1001_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_m_1001_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_m_1002_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_1002_tos(Bin, 0, 0, TrUserData).

dfp_read_field_def_m_1002_tos(<<>>, 0, 0, _) ->
    #m_1002_tos{};
dfp_read_field_def_m_1002_tos(Other, Z1, Z2,
			      TrUserData) ->
    dg_read_field_def_m_1002_tos(Other, Z1, Z2, TrUserData).

dg_read_field_def_m_1002_tos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1002_tos(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
dg_read_field_def_m_1002_tos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_m_1002_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_1002_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_1002_tos(Rest, 0, 0,
					   TrUserData);
      3 ->
	  skip_group_m_1002_tos(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_m_1002_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_1002_tos(<<>>, 0, 0, _) ->
    #m_1002_tos{}.

skip_varint_m_1002_tos(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    skip_varint_m_1002_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_1002_tos(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    dfp_read_field_def_m_1002_tos(Rest, Z1, Z2, TrUserData).

skip_length_delimited_m_1002_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1002_tos(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
skip_length_delimited_m_1002_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1002_tos(Rest2, 0, 0, TrUserData).

skip_group_m_1002_tos(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1002_tos(Rest, 0, Z2, TrUserData).

skip_32_m_1002_tos(<<_:32, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1002_tos(Rest, Z1, Z2, TrUserData).

skip_64_m_1002_tos(<<_:64, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1002_tos(Rest, Z1, Z2, TrUserData).

decode_msg_m_1002_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1002_toc(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1002_toc(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_m_1002_toc_public_key(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_m_1002_toc(<<>>, 0, 0, F@_1, _) ->
    #m_1002_toc{public_key = F@_1};
dfp_read_field_def_m_1002_toc(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_m_1002_toc(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_m_1002_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1002_toc(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_m_1002_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_1002_toc_public_key(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1002_toc(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_1002_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_1002_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_m_1002_toc(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_m_1002_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_1002_toc(<<>>, 0, 0, F@_1, _) ->
    #m_1002_toc{public_key = F@_1}.

d_field_m_1002_toc_public_key(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_1002_toc_public_key(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_m_1002_toc_public_key(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_m_1002_toc(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_m_1002_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_m_1002_toc(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_1002_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_1002_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_m_1002_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1002_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_1002_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1002_toc(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_m_1002_toc(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1002_toc(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_m_1002_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_m_1002_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_m_1002_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_m_1002_toc(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_m_1003_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_1003_tos(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1003_tos(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_1003_tos_username(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_m_1003_tos(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_1003_tos_password(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_m_1003_tos(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #m_1003_tos{username = F@_1, password = F@_2};
dfp_read_field_def_m_1003_tos(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_m_1003_tos(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_m_1003_tos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1003_tos(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_m_1003_tos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_1003_tos_username(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_m_1003_tos_password(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1003_tos(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_m_1003_tos(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_1003_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_m_1003_tos(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_m_1003_tos(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_1003_tos(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #m_1003_tos{username = F@_1, password = F@_2}.

d_field_m_1003_tos_username(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_1003_tos_username(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_m_1003_tos_username(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1003_tos(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_m_1003_tos_password(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_1003_tos_password(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_m_1003_tos_password(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1003_tos(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_m_1003_tos(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_1003_tos(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_m_1003_tos(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_1003_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_m_1003_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1003_tos(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_1003_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1003_tos(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_m_1003_tos(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1003_tos(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_m_1003_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_m_1003_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_m_1003_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_m_1003_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_m_1003_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1003_toc(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1003_toc(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_m_1003_toc_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_m_1003_toc(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_m_1003_toc_port(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_m_1003_toc(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_m_1003_toc_role_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_m_1003_toc(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_m_1003_toc_auth_key(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_m_1003_toc(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #m_1003_toc{ip = F@_1, port = F@_2, role_id = F@_3,
		auth_key = F@_4};
dfp_read_field_def_m_1003_toc(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_m_1003_toc(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_m_1003_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1003_toc(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_m_1003_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_1003_toc_ip(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      18 ->
	  d_field_m_1003_toc_port(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_m_1003_toc_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      34 ->
	  d_field_m_1003_toc_auth_key(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1003_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_m_1003_toc(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_m_1003_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_m_1003_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_m_1003_toc(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_m_1003_toc(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #m_1003_toc{ip = F@_1, port = F@_2, role_id = F@_3,
		auth_key = F@_4}.

d_field_m_1003_toc_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_1003_toc_ip(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_m_1003_toc_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1003_toc(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_m_1003_toc_port(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_1003_toc_port(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_m_1003_toc_port(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1003_toc(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, TrUserData).

d_field_m_1003_toc_role_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_1003_toc_role_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_m_1003_toc_role_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1003_toc(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_m_1003_toc_auth_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_1003_toc_auth_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_m_1003_toc_auth_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_m_1003_toc(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, TrUserData).

skip_varint_m_1003_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_m_1003_toc(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_m_1003_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_1003_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_m_1003_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1003_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_m_1003_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1003_toc(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_m_1003_toc(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1003_toc(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_m_1003_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_1003_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_m_1003_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_1003_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

decode_msg_m_1004_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1004_toc(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), id([], TrUserData),
				  TrUserData).

dfp_read_field_def_m_1004_toc(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1004_toc_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_m_1004_toc(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1004_toc_role_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_m_1004_toc(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_1004_toc_test_info(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_m_1004_toc(<<>>, 0, 0, F@_1, F@_2,
			      R1, TrUserData) ->
    #m_1004_toc{ip = F@_1, role_id = F@_2,
		test_info = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_1004_toc(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_m_1004_toc(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_m_1004_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1004_toc(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_m_1004_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_1004_toc_ip(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      16 ->
	  d_field_m_1004_toc_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_m_1004_toc_test_info(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1004_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_m_1004_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_m_1004_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_m_1004_toc(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_m_1004_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_m_1004_toc(<<>>, 0, 0, F@_1, F@_2, R1,
			     TrUserData) ->
    #m_1004_toc{ip = F@_1, role_id = F@_2,
		test_info = lists_reverse(R1, TrUserData)}.

d_field_m_1004_toc_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1004_toc_ip(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_m_1004_toc_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1004_toc(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_m_1004_toc_role_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1004_toc_role_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_m_1004_toc_role_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1004_toc(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_m_1004_toc_test_info(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_1004_toc_test_info(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_m_1004_toc_test_info(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_test(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_1004_toc(RestF, 0, 0, F@_1, F@_2,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_m_1004_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_1004_toc(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_m_1004_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1004_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_m_1004_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1004_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_m_1004_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1004_toc(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_m_1004_toc(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1004_toc(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_m_1004_toc(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1004_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_m_1004_toc(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_1004_toc(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

decode_msg_m_1090_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_1090_tos(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_1090_tos(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_1090_tos_role_id(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_m_1090_tos(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_1090_tos_auth_key(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_m_1090_tos(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #m_1090_tos{role_id = F@_1, auth_key = F@_2};
dfp_read_field_def_m_1090_tos(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_m_1090_tos(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_m_1090_tos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1090_tos(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_m_1090_tos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_1090_tos_role_id(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_m_1090_tos_auth_key(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_1090_tos(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_m_1090_tos(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_1090_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_m_1090_tos(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_m_1090_tos(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_1090_tos(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #m_1090_tos{role_id = F@_1, auth_key = F@_2}.

d_field_m_1090_tos_role_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_1090_tos_role_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_m_1090_tos_role_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_1090_tos(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_m_1090_tos_auth_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_1090_tos_auth_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_m_1090_tos_auth_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_m_1090_tos(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_m_1090_tos(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_1090_tos(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_m_1090_tos(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_1090_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_m_1090_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1090_tos(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_1090_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1090_tos(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_m_1090_tos(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1090_tos(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_m_1090_tos(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_m_1090_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_m_1090_tos(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_m_1090_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_m_1090_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_1090_toc(Bin, 0, 0, TrUserData).

dfp_read_field_def_m_1090_toc(<<>>, 0, 0, _) ->
    #m_1090_toc{};
dfp_read_field_def_m_1090_toc(Other, Z1, Z2,
			      TrUserData) ->
    dg_read_field_def_m_1090_toc(Other, Z1, Z2, TrUserData).

dg_read_field_def_m_1090_toc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_1090_toc(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
dg_read_field_def_m_1090_toc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_m_1090_toc(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_1090_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_1090_toc(Rest, 0, 0,
					   TrUserData);
      3 ->
	  skip_group_m_1090_toc(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_m_1090_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_1090_toc(<<>>, 0, 0, _) ->
    #m_1090_toc{}.

skip_varint_m_1090_toc(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    skip_varint_m_1090_toc(Rest, Z1, Z2, TrUserData);
skip_varint_m_1090_toc(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    dfp_read_field_def_m_1090_toc(Rest, Z1, Z2, TrUserData).

skip_length_delimited_m_1090_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_1090_toc(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
skip_length_delimited_m_1090_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_1090_toc(Rest2, 0, 0, TrUserData).

skip_group_m_1090_toc(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_1090_toc(Rest, 0, Z2, TrUserData).

skip_32_m_1090_toc(<<_:32, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1090_toc(Rest, Z1, Z2, TrUserData).

skip_64_m_1090_toc(<<_:64, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_m_1090_toc(Rest, Z1, Z2, TrUserData).

decode_msg_p_test(Bin, TrUserData) ->
    dfp_read_field_def_p_test(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_test(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_test_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
dfp_read_field_def_p_test(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_test_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_p_test(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_test_role_id3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_test(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_test_role_id4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_test(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_test_role_id5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_test(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #p_test{ip = F@_1, role_id = F@_2, role_id3 = F@_3,
	    role_id4 = F@_4, role_id5 = F@_5};
dfp_read_field_def_p_test(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_test(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_test(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_test(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_test(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_test_ip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, TrUserData);
      16 ->
	  d_field_p_test_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_test_role_id3(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      34 ->
	  d_field_p_test_role_id4(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_test_role_id5(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_p_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_p_test(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_test(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_p_test(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #p_test{ip = F@_1, role_id = F@_2, role_id3 = F@_3,
	    role_id4 = F@_4, role_id5 = F@_5}.

d_field_p_test_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_test_ip(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_test_ip(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_test(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_p_test_role_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_test_role_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_test_role_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_test(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_p_test_role_id3(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_test_role_id3(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_test_role_id3(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_test(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_p_test_role_id4(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_test_role_id4(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_test_role_id4(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_test(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, TrUserData).

d_field_p_test_role_id5(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_test_role_id5(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_test_role_id5(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_test(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, TrUserData).

skip_varint_p_test(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_test(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_p_test(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_test(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_test(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_test(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_p_test(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_test(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_p_test(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_test(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_p_test(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_test(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_p_test(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_test(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_1101_toc ->
	  merge_msg_m_1101_toc(Prev, New, TrUserData);
      m_1001_tos ->
	  merge_msg_m_1001_tos(Prev, New, TrUserData);
      m_1001_toc ->
	  merge_msg_m_1001_toc(Prev, New, TrUserData);
      m_1002_tos ->
	  merge_msg_m_1002_tos(Prev, New, TrUserData);
      m_1002_toc ->
	  merge_msg_m_1002_toc(Prev, New, TrUserData);
      m_1003_tos ->
	  merge_msg_m_1003_tos(Prev, New, TrUserData);
      m_1003_toc ->
	  merge_msg_m_1003_toc(Prev, New, TrUserData);
      m_1004_toc ->
	  merge_msg_m_1004_toc(Prev, New, TrUserData);
      m_1090_tos ->
	  merge_msg_m_1090_tos(Prev, New, TrUserData);
      m_1090_toc ->
	  merge_msg_m_1090_toc(Prev, New, TrUserData);
      p_test -> merge_msg_p_test(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_1101_toc/3}).
merge_msg_m_1101_toc(#m_1101_toc{description =
				     PFdescription},
		     #m_1101_toc{cmd = NFcmd, error_code = NFerror_code,
				 description = NFdescription},
		     _) ->
    #m_1101_toc{cmd = NFcmd, error_code = NFerror_code,
		description =
		    if NFdescription =:= undefined -> PFdescription;
		       true -> NFdescription
		    end}.

-compile({nowarn_unused_function,merge_msg_m_1001_tos/3}).
merge_msg_m_1001_tos(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_m_1001_toc/3}).
merge_msg_m_1001_toc(#m_1001_toc{},
		     #m_1001_toc{time = NFtime}, _) ->
    #m_1001_toc{time = NFtime}.

-compile({nowarn_unused_function,merge_msg_m_1002_tos/3}).
merge_msg_m_1002_tos(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_m_1002_toc/3}).
merge_msg_m_1002_toc(#m_1002_toc{},
		     #m_1002_toc{public_key = NFpublic_key}, _) ->
    #m_1002_toc{public_key = NFpublic_key}.

-compile({nowarn_unused_function,merge_msg_m_1003_tos/3}).
merge_msg_m_1003_tos(#m_1003_tos{},
		     #m_1003_tos{username = NFusername,
				 password = NFpassword},
		     _) ->
    #m_1003_tos{username = NFusername,
		password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_m_1003_toc/3}).
merge_msg_m_1003_toc(#m_1003_toc{},
		     #m_1003_toc{ip = NFip, port = NFport,
				 role_id = NFrole_id, auth_key = NFauth_key},
		     _) ->
    #m_1003_toc{ip = NFip, port = NFport,
		role_id = NFrole_id, auth_key = NFauth_key}.

-compile({nowarn_unused_function,merge_msg_m_1004_toc/3}).
merge_msg_m_1004_toc(#m_1004_toc{test_info =
				     PFtest_info},
		     #m_1004_toc{ip = NFip, role_id = NFrole_id,
				 test_info = NFtest_info},
		     TrUserData) ->
    #m_1004_toc{ip = NFip, role_id = NFrole_id,
		test_info =
		    if PFtest_info /= undefined, NFtest_info /= undefined ->
			   'erlang_++'(PFtest_info, NFtest_info, TrUserData);
		       PFtest_info == undefined -> NFtest_info;
		       NFtest_info == undefined -> PFtest_info
		    end}.

-compile({nowarn_unused_function,merge_msg_m_1090_tos/3}).
merge_msg_m_1090_tos(#m_1090_tos{},
		     #m_1090_tos{role_id = NFrole_id, auth_key = NFauth_key},
		     _) ->
    #m_1090_tos{role_id = NFrole_id, auth_key = NFauth_key}.

-compile({nowarn_unused_function,merge_msg_m_1090_toc/3}).
merge_msg_m_1090_toc(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_p_test/3}).
merge_msg_p_test(#p_test{role_id3 = PFrole_id3,
			 role_id4 = PFrole_id4, role_id5 = PFrole_id5},
		 #p_test{ip = NFip, role_id = NFrole_id,
			 role_id3 = NFrole_id3, role_id4 = NFrole_id4,
			 role_id5 = NFrole_id5},
		 _) ->
    #p_test{ip = NFip, role_id = NFrole_id,
	    role_id3 =
		if NFrole_id3 =:= undefined -> PFrole_id3;
		   true -> NFrole_id3
		end,
	    role_id4 =
		if NFrole_id4 =:= undefined -> PFrole_id4;
		   true -> NFrole_id4
		end,
	    role_id5 =
		if NFrole_id5 =:= undefined -> PFrole_id5;
		   true -> NFrole_id5
		end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_1101_toc ->
	  v_msg_m_1101_toc(Msg, [MsgName], TrUserData);
      m_1001_tos ->
	  v_msg_m_1001_tos(Msg, [MsgName], TrUserData);
      m_1001_toc ->
	  v_msg_m_1001_toc(Msg, [MsgName], TrUserData);
      m_1002_tos ->
	  v_msg_m_1002_tos(Msg, [MsgName], TrUserData);
      m_1002_toc ->
	  v_msg_m_1002_toc(Msg, [MsgName], TrUserData);
      m_1003_tos ->
	  v_msg_m_1003_tos(Msg, [MsgName], TrUserData);
      m_1003_toc ->
	  v_msg_m_1003_toc(Msg, [MsgName], TrUserData);
      m_1004_toc ->
	  v_msg_m_1004_toc(Msg, [MsgName], TrUserData);
      m_1090_tos ->
	  v_msg_m_1090_tos(Msg, [MsgName], TrUserData);
      m_1090_toc ->
	  v_msg_m_1090_toc(Msg, [MsgName], TrUserData);
      p_test -> v_msg_p_test(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_1101_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1101_toc/3}).
v_msg_m_1101_toc(#m_1101_toc{cmd = F1, error_code = F2,
			     description = F3},
		 Path, TrUserData) ->
    v_type_uint32(F1, [cmd | Path], TrUserData),
    v_type_uint32(F2, [error_code | Path], TrUserData),
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [description | Path], TrUserData)
    end,
    ok;
v_msg_m_1101_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1101_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1001_tos/3}).
-dialyzer({nowarn_function,v_msg_m_1001_tos/3}).
v_msg_m_1001_tos(#m_1001_tos{}, _Path, _) -> ok;
v_msg_m_1001_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1001_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1001_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1001_toc/3}).
v_msg_m_1001_toc(#m_1001_toc{time = F1}, Path,
		 TrUserData) ->
    v_type_uint32(F1, [time | Path], TrUserData), ok;
v_msg_m_1001_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1001_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1002_tos/3}).
-dialyzer({nowarn_function,v_msg_m_1002_tos/3}).
v_msg_m_1002_tos(#m_1002_tos{}, _Path, _) -> ok;
v_msg_m_1002_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1002_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1002_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1002_toc/3}).
v_msg_m_1002_toc(#m_1002_toc{public_key = F1}, Path,
		 TrUserData) ->
    v_type_bytes(F1, [public_key | Path], TrUserData), ok;
v_msg_m_1002_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1002_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1003_tos/3}).
-dialyzer({nowarn_function,v_msg_m_1003_tos/3}).
v_msg_m_1003_tos(#m_1003_tos{username = F1,
			     password = F2},
		 Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_m_1003_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1003_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1003_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1003_toc/3}).
v_msg_m_1003_toc(#m_1003_toc{ip = F1, port = F2,
			     role_id = F3, auth_key = F4},
		 Path, TrUserData) ->
    v_type_string(F1, [ip | Path], TrUserData),
    v_type_string(F2, [port | Path], TrUserData),
    v_type_uint32(F3, [role_id | Path], TrUserData),
    v_type_bytes(F4, [auth_key | Path], TrUserData),
    ok;
v_msg_m_1003_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1003_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1004_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1004_toc/3}).
v_msg_m_1004_toc(#m_1004_toc{ip = F1, role_id = F2,
			     test_info = F3},
		 Path, TrUserData) ->
    v_type_string(F1, [ip | Path], TrUserData),
    v_type_uint32(F2, [role_id | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_msg_p_test(Elem, [test_info | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_test}}, F3,
			 [test_info | Path])
    end,
    ok;
v_msg_m_1004_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1004_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1090_tos/3}).
-dialyzer({nowarn_function,v_msg_m_1090_tos/3}).
v_msg_m_1090_tos(#m_1090_tos{role_id = F1,
			     auth_key = F2},
		 Path, TrUserData) ->
    v_type_uint32(F1, [role_id | Path], TrUserData),
    v_type_bytes(F2, [auth_key | Path], TrUserData),
    ok;
v_msg_m_1090_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1090_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_1090_toc/3}).
-dialyzer({nowarn_function,v_msg_m_1090_toc/3}).
v_msg_m_1090_toc(#m_1090_toc{}, _Path, _) -> ok;
v_msg_m_1090_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_1090_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_p_test/3}).
-dialyzer({nowarn_function,v_msg_p_test/3}).
v_msg_p_test(#p_test{ip = F1, role_id = F2,
		     role_id3 = F3, role_id4 = F4, role_id5 = F5},
	     Path, TrUserData) ->
    v_type_string(F1, [ip | Path], TrUserData),
    v_type_uint32(F2, [role_id | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [role_id3 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [role_id4 | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [role_id5 | Path], TrUserData)
    end,
    ok;
v_msg_p_test(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_test}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, m_1101_toc},
      [#field{name = cmd, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = error_code, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = description, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, m_1001_tos}, []},
     {{msg, m_1001_toc},
      [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, m_1002_tos}, []},
     {{msg, m_1002_toc},
      [#field{name = public_key, fnum = 1, rnum = 2,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, m_1003_tos},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, m_1003_toc},
      [#field{name = ip, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = role_id, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = auth_key, fnum = 4, rnum = 5,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, m_1004_toc},
      [#field{name = ip, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = role_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = test_info, fnum = 3, rnum = 4,
	      type = {msg, p_test}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_1090_tos},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = auth_key, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, m_1090_toc}, []},
     {{msg, p_test},
      [#field{name = ip, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = role_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = role_id3, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = role_id4, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = role_id5, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [m_1101_toc, m_1001_tos, m_1001_toc, m_1002_tos,
     m_1002_toc, m_1003_tos, m_1003_toc, m_1004_toc,
     m_1090_tos, m_1090_toc, p_test].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_1101_toc, m_1001_tos, m_1001_toc, m_1002_tos,
     m_1002_toc, m_1003_tos, m_1003_toc, m_1004_toc,
     m_1090_tos, m_1090_toc, p_test].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_1101_toc) ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = error_code, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = description, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(m_1001_tos) -> [];
find_msg_def(m_1001_toc) ->
    [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(m_1002_tos) -> [];
find_msg_def(m_1002_toc) ->
    [#field{name = public_key, fnum = 1, rnum = 2,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(m_1003_tos) ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(m_1003_toc) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = role_id, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = auth_key, fnum = 4, rnum = 5,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(m_1004_toc) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = role_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = test_info, fnum = 3, rnum = 4,
	    type = {msg, p_test}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_1090_tos) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = auth_key, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(m_1090_toc) -> [];
find_msg_def(p_test) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = role_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = role_id3, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = role_id4, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = role_id5, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
